# Declare variables to be passed into your templates.

replicaCount: 1

# Choose deployment type: "build" or "repository"
deploymentType: "build"

# BuildConfig settings (used when deploymentType: "build")
buildConfig:
  gitUri: ""  # URL of the git repository
  gitRef: "main"  # Branch of the git repository
  strategy: Docker
  dockerfilePath: Dockerfile  # Path to the Dockerfile
  sourceSecret: {}  # Secret containing the SSH keys
    # name: ssh-privatekey

# Repository settings (used when deploymentType: "repository")
repository:
  name: ""  # Image name to pull, e.g., # e.g., docker.io/bitnami/nginx (turn off liveness probe and readiness probe for this test image)
  tag: "latest"  # Image tag to pull
  pullSecret: ""  # Optional: name of the pull secret for private repositories

# Image settings (common for both deployment types)
image:
  # For buildConfig: automatically set to the buildConfig output
  # For repository: will use repository.name:repository.tag
  pullPolicy: Always
  env:
    - HF_HOME: "/tmp/.cache/huggingface"  # Set the new variable
    - MPLCONFIGDIR: "/tmp/.config/matplotlib"
    - LOGGING_CONFIG_PATH: "/tmp/app.log"  # If you want to set a logging path
    - gt4sd_local_cache_path: "/data/.openad_models"  # !important mount checkpoints to this Volume
    - ENABLE_CACHE_RESULTS: "False"  # enable cache for inference results, enable only for deterministic models
  envFrom: []  # List of Secrets or ConfigMaps to inject into the init container and main container
  #   - secretRef:
  #       name: aws-credentials
  #   - configMapRef:
  #       name: config-map-name

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  # type: NodePort
  port: 80
  targetPort: 8080  # Internal port of your application

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    # nvidia.com/gpu: 1
    cpu: 2000m  # 2 CPU cores
    memory: "8Gi"
  requests:
    # nvidia.com/gpu: 1
    cpu: 1000m   # 1 CPU cores (adjust if necessary)
    memory: "2Gi"

livenessProbe:
  httpGet:
    path: /health
    port: 8081
  initialDelaySeconds: 10
  periodSeconds: 15
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 15
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 5

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

storage:
  create: false  # Set to true if you want to create a PersistentVolumeClaim
  name: "s3-data-pvc"  # unique name for the storage
  className: ""
  accessMode: ReadWriteMany
  size: 100Gi

volumes:
  - name: s3-data-pvc
    # persistentVolumeClaim:  # Uncomment to use a PVC
    #   claimName: s3-data-pvc  # name of the PVC to use

volumeMounts:
  - name: s3-data-pvc
    mountPath: "/data"

# init container config to download s3 resources
aws:
  # region: "us-east-1"  # AWS region
  # args: # command to run in the init container. # download s3 resources from bucket ahead of time.
  #   - "aws s3 sync s3://<bucket-name> /data"

nodeSelector: {}

tolerations: []
#   - key: "nvidia.com/gpu"
#     effect: "NoSchedule"


affinity: {}
